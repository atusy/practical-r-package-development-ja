[
["index.html", "Practical R Package Development（日本語） はじめに 本書の想定", " Practical R Package Development（日本語） Hiroaki Yutani 2018-10-07 はじめに Rのパッケージ開発については「R Packages」（Hadley Wickham、2015）に詳しいが、Rのパッケージ開発にはここ数年で様々な変化があった。 幸い、同書は第2版に向けて大幅に書き直される予定1なので、賢明なRパッケージ開発者はそれを待つのがいいだろう。本書は、あくまでもそれまでのつなぎのような存在として、むしろ筆者のメモ代わりとして、衝動的に書き殴られたものだ。Rパッケージ開発の基礎はすっとばし、新たなトピックを中心に取り扱う。信用がおける知識についてはあくまでも「R Packages」を参照されたい。 本書の想定 Rのパッケージ開発には様々な方法があるが、本書では RStudio GitHub を用いる場合について考える。場合によってはEmacsの場合についても触れることもある。 https://github.com/hadley/r-pkgs/issues/502#issuecomment-417700998↩ "],
["r.html", "Chapter 1 新しくRパッケージを作る 1.1 RStudioからRのパッケージをつくる 1.2 RStudioのプロジェクト設定を変える 1.3 不要なファイルを消す 1.4 Git 1.5 DESCRIPTIONを修正 1.6 usethisパッケージで必要な設定を追加", " Chapter 1 新しくRパッケージを作る 細かいことは抜きにしてRのパッケージを作ってみよう。RStudioとusethisパッケージを使えばそれは簡単にできる。 1.1 RStudioからRのパッケージをつくる 右上のプロジェクトアイコンからNew Projectを選ぶ。 次に、New Directory、R Packageと選んでいく。 最後に、Rのパッケージ名を入力し、Create a git repositoryにチェックを入れたら、Create Projectをクリックする。 これでひとまずひな形が完成する。しかし、ここからまだやることは多いので油断しないように。 1.2 RStudioのプロジェクト設定を変える ドキュメントやNAMESPACEはRoxygen（後述（たぶん））を使って書きたいので、そのあたりがビルド時に自動で生成されるように設定を変更する。 BuildメニューからConfigure Build Tools…を選び、Generate documentation with Roxygenにチェックを入れる。 チェックを入れるとポップアップが出るが、そこで選ぶべきものは特にないので、そのままOKを押せばいい。 1.3 不要なファイルを消す 初期状態ではhello.Rみたいなファイルが見本として置かれているが、不要なので消す。具体的には以下の3つのファイルだ。 R/hello.R man/hello.Rd NAMESPACE NAMESPACEを消すのは、初期状態のNAMESPACEがあるとRoxygenによる自動生成がはたらかないためだ（Roxygen以外によってつくられたNAMESPACEの場合は上書きしない）。 消した後でCtrl+Shift+Dでドキュメントを生成してみよう。 すると、以下のようなNAMESPACEができているはずだ。 # Generated by roxygen2: do not edit by hand 1.4 Git 1.4.1 コミット このあたりまでは間違いないが、次のステップでは色々なパターンがあるので間違えた場合に備えていったんコミットしておく。 Ctrl+Alt+Mでコミット画面が開くので、全ファイルにチェックを入れ、「initial commit」のような適当なメッセージを入れてCommitを押す。 1.4.2 remoteを設定 ついでに、GitHubにレポジトリを作ってremoteに設定しておこう。 まずは同名のレポジトリを作成する。 この際、Initialize this repository with a READMEやAdd a licenseは指定せず空のレポジトリにすること。 すでにファイルがコミットされた状態だと、今手元にあるものとコンフリクトが生じてしまう。 空のレポジトリをつくると、以下のようにremoteを加えるよう指示が出ているのでこれをそのままTerminalにコピペする（pushはまだしなくてもいい）。 1.5 DESCRIPTIONを修正 usethisパッケージも万能ではない。手作業でやらないといけない作業もいくつかある。 （後回しでいいが、TitleフィールドやDescriptionフィールドを適切に埋めるのも忘れずに） 1.5.1 Version デフォルトのDESCRIPTIONだとVersionフィールドは以下のようになっている。 Version: 0.1.0 ここは好みだが、開発し始めたこのパッケージはまだ0.0.1にも達していない、という気分なら0.0.0.9000にしておく。 Version: 0.0.0.9000 1.5.2 Authors@R デフォルトのDESCRIPTIONだとAuthorフィールドとMaintainerフィールドは以下のようになっている。 Author: Who wrote it Maintainer: The package maintainer &lt;yourself@somewhere.net&gt; ここも好みだが、まとめてAuthors@Rフィールドにした方がナウい気がするのでそうする。 Authors@R: person(&quot;Hiroaki&quot;, &quot;Yutani&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;), email = &quot;yutani@example.com&quot;) 1.6 usethisパッケージで必要な設定を追加 ここから先はusethisにまとまっているのでそれを活用する。 1.6.1 ライセンス ライセンスを追加するには、MITライセンスならuse_mit_license()を実行すればいい。 DESCRIPTIONのLicenseフィールドを書き換え、LICENSEやLICENSE.mdを追加し、.Rbuildignoreに加えてくれる。 usethis::use_mit_license(&quot;Hiroaki Yutani&quot;) 他にも、use_gpl3_license()（GPLv3）、use_apl2_license()（Apache License 2.0）が用意されている。 データのみのパッケージの場合はuse_cc0_license()（CC0）がいいらしい。 ちなみに、引数に名前を指定するのはusethis.full_nameというオプションが設定されていれば省略できる。 .Rprofileに以下を書き加えておくのもいいだろう。.Rprofileはusethis::edit_r_profile()で開くのが早い。 options(usethis.full_name = &quot;My name&quot;) 1.6.2 Roxygen + Markdown RoxygenにはMarkdown記法2を使うことができる。Markdown記法には落とし穴も多いが、手軽に書けるので便利ではある。 Markdown記法を有効にするにはuse_roxygen_md()を使う。といってもこの関数は特に何もせず、roxygen2md::roxygen2md()を実行するように促すだけのようだ。 usethis::use_roxygen_md() 1.6.3 README.Rmd READMEを追加するにはuse_readme_rmd()を使う。もしくは、R MarkdownファイルではなくMarkdownファイルにしたい場合はuse_readme_md()もある。 usethis::use_readme_rmd() ところで、このREADME.Rmdをさっそくコミットしようとすると以下のようなエラーメッセージを見ることだろう。 README.md is out of date; please re-knit README.Rmd use &#39;git commit --no-verify&#39; to override this check これは、「Rmdとmdのどちらかに更新がある場合もう片方も更新されなければいけない」というpre-commit hookも同時に追加されているからだ。 use_readme_rmd()はREADME.RmdだけでREADME.mdは追加してくれない。ひとまず自分でknitしよう。 このhookは、knitし忘れを防ぐという意味では役に立つが、例えば、README.Rmdには変化がないがknitしなおしたら出力が変わる、というような場合もコミットできなくなる（RStudioのGUIからは--no-verifyでコミットすることができない）。 面倒に感じるなら.git/hooks/pre-commitを削除しておいてもいい。 1.6.4 testthat おそらくテストにはtestthatパッケージを使うだろう。use_testthat()を実行しておこう。tests/testthatディレクトリを掘ったり、Suggestsにtestthatパッケージを追加してくれたりする。 usethis::use_testthat() 紛らわしいが、テストケースを追加するにはuse_test(&quot;テストファイル名&quot;)を使う。 usethis::use_test(&quot;util&quot;) 1.6.5 CI Travis CIはuse_travis()、AppVeyorはuse_appveyor()で設定できる。 usethis::use_travis() usethis::use_appveyor() 具体的には、設定ファイル（.travis.yml、appveyor.yml）を追加し、各CIのウェブページを表示してくれる。バッジは勝手には追加してくれないので、以下のように表示されるコードを自分でREADMEにコピペしよう（READMEのknitし直しも忘れずに）。 Copying code to clipboard: [![Travis build status](https://travis-ci.org/yutannihilation/roygvib.svg?branch=master)](https://travis-ci.org/yutannihilation/roygvib) Copying code to clipboard: [![AppVeyor build status](https://ci.appveyor.com/api/projects/status/github/yutannihilation/roygvib?branch=master&amp;svg=true)](https://ci.appveyor.com/project/yutannihilation/roygvib) 1.6.6 NEWS.md まだリリースもしていないのにちょっと気が早いかもしれないが、NEWS.mdを追加するにはuse_news_md()を使う。 usethis::use_news_md() https://cran.r-project.org/web/packages/roxygen2/vignettes/markdown.html↩ "],
["section-2.html", "Chapter 2 他人のパッケージにコントリビュートする", " Chapter 2 他人のパッケージにコントリビュートする "],
["section-3.html", "Chapter 3 リリースする", " Chapter 3 リリースする "],
["section-4.html", "Chapter 4 その他 4.1 dynamic registeration of S3 method", " Chapter 4 その他 4.1 dynamic registeration of S3 method "]
]
